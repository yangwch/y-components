@import '../../style/mixins/index.less';

.active () {
  & when (@theme =dark) {
    border-color: @input-border-color;
  }

  & when (not (@theme =dark) and not (@theme =variable)) {
    border-color: @input-hover-border-color;
  }

  & when not (@theme =variable) {
    box-shadow: @input-outline-offset @outline-blur-size @outline-width fade(@input-border-color, @outline-fade);
  }

  & when (@theme =variable) {
    border-color: @input-hover-border-color;
    box-shadow: @input-outline-offset @outline-blur-size @outline-width @outlineColor;
  }

  // border-right-width: @border-width-base;
}

// == when hover
.hover(@color: @input-hover-border-color) {
  border-color: @color;
  // border-right-width: @border-width-base;
}

.disable() {
  color: @input-disabled-color;
  background-color: @input-disabled-bg;
  border-color: @input-border-color;
  box-shadow: none;
  cursor: not-allowed;
  opacity: 1;

  &:hover {
    .hover(@input-border-color);
  }
}

.input() {
  .reset-component();
  padding: @input-padding-vertical-base @input-padding-horizontal-base;
  color: @input-color;
  font-size: @font-size-base;
  line-height: @line-height-base;
  background-color: @input-bg;
  background-image: none;
  border: @border-width-base @border-style-base @input-border-color;
  border-radius: @control-border-radius;
  transition: all 0.3s;
  outline: none;

  &:hover {
    .hover();
  }

  &:focus,
  &-focused {
    .active();
  }

  &-disabled {
    .disable();
  }
}

// size mixins for input
.input-lg() {
  padding: @input-padding-vertical-lg @input-padding-horizontal-lg;
  font-size: @font-size-lg;
}

.input-sm() {
  padding: @input-padding-vertical-sm @input-padding-horizontal-sm;
}